#https://www.ccs-labs.org/software/veins-vlc/

[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 1s
**.cmdenv-log-level = trace

ned-path = .
image-path = ../../images

network = Dummy

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

**.scalar-recording = true
**.vector-recording = true
**.vector-record-eventnumbers = false


*.playgroundSizeX = 5000m
*.playgroundSizeY = 4000m
*.playgroundSizeZ = 50m


##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = true

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.obstacles = xmldoc("config-mmwave.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.1s
*.manager.host = "localhost"
*.manager.port = 9999
*.manager.autoShutdown = true
*.manager.launchConfig = xmldoc("darmstadt.launchd.xml")

##########################################################
#                       RSU SETTINGS                     #
#                                                        #
#                                                        #
##########################################################
*.rsu[0].mobility.x = ${x=1728}
*.rsu[0].mobility.y = ${y=1070}
*.rsu[0].mobility.z = ${z=8}


*.rsu[*].applType = "TraCIDemoRSU11p"
#*.rsu[*].appl.headerLength = 80 bit
#*.rsu[*].appl.sendBeacons = false
#*.rsu[*].appl.dataOnSch = false
#*.rsu[*].appl.beaconInterval = 1s # TODO change this to 1s
#*.rsu[*].appl.beaconUserPriority = 7
#*.rsu[*].appl.dataUserPriority = 5
*.rsu[*].nic.phy80211p.antennaOffsetZ = 0 m



##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 20mW
*.**.nic.mac1609_4.bitrate = 6Mbps
*.**.nic.phy80211p.minPowerLevel = -110dBm


# TODO What is noise floor of mmWave?
*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -98dBm

*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

*.**.nic.phy80211p.antenna = xmldoc("antenna.xml", "/root/Antenna[@id='monopole']")
*.node[*].nic.phy80211p.antennaOffsetY = 0 m
*.node[*].nic.phy80211p.antennaOffsetZ = 1.895 m

##########################################################
#                      App Layer                         #
##########################################################
*.node[*].applType = "TraCIDemo11p"
#*.node[*].appl.headerLength = 80 bit
#*.node[*].appl.sendBeacons = false
#*.node[*].appl.dataOnSch = false
#*.node[*].appl.beaconInterval = 1s

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].veinsmobility.x = 0
*.node[*].veinsmobility.y = 0
*.node[*].veinsmobility.z = 0
*.node[*].veinsmobility.setHostSpeed = true
*.node[*0].veinsmobility.accidentCount = 0
*.node[*0].veinsmobility.accidentStart = 75s
*.node[*0].veinsmobility.accidentDuration = 50s


#TODO 
##########################################################
#            VLC specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
# PhyLayerVlc
*.**.nicMmWave**.macMmWave.txPower = 3.16mW #5dBm	# Change if you want to change the SELECTED FREQUENCY
#*.**.nicMmWave**.phyMmWave.bitrate = 6Mbps	# Assuming OOK for PHY II from Table 74 of IEEE 802.15.7 Std

# BasePhyLayer
*.**.nicMmWave**.phyMmWave.usePropagationDelay = true
# Change if you want to change the SELECTED FREQUENCY
# float total_noise = 10 * log10(bandwidth) + noise_figure + (-174); 
#//bandwidth = 1e9, noise_figure = 10, implementation_loss = 5
*.**.nicMmWave**.phyMmWave.noiseFloor = -78dBm #It should be -70dBm? Receiver sensitivity in the standard states that MCSO has the receive sensitivity of -78dBm
*.**.nicMmWave**.phyMmWave.ccaThreshold = -77dBm # TODO it's wrong, need to do sth
*.**.nicMmWave**.phyMmWave.useNoiseFloor = true
*.**.nicMmWave**.phyMmWave.minPowerLevel = -114dBm
*.**.nicMmWave.macMmWave.fss = 36 # TODO handle it, it just allow range [1,16]
*.**.nicMmWave.macMmWave.a_bft_length = 8 #default is 8

# In the VehicleObstacleShadowing, receiverPos = offset (because mobility(Base)->getPositionAt return z = 0), while the vehicle as obstalces' height is just vehicleHeight.
#Therefore, we better to set the antennaOffset of nodes (which use veinsMObility) to be the vehicle height,
#while the offset of rsu should be 0, because rsu can get the z value from its BaseMobility 
*.node[*].nicMmWave.phyMmWave.antennaOffsetZ = 1.8m 
*.rsu[0].nicMmWave.phyMmWave.antennaOffsetZ = 0m 



[Config Sim-Options]
description = "Generic simulation settings"


experiment-label = "mmWave-experiment"
result-dir = results/
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"

warmup-period = 0
sim-time-limit = 24h
repeat = 1
seed-set = ${repetition}

# Cmdenv debugs
#cmdenv-express-mode = false
#cmdenv-log-prefix = "[%c%?-%l] %M "
#cmdenv-event-banners = false

**.application.cmdenv-log-level = trace
**.splitter.cmdenv-log-level = trace
**.macMmWave.cmdenv-log-level = trace
**.phyMmWave.cmdenv-log-level = trace

*.**.nicMmWave.phyMmWave.antenna = xmldoc("config-mmwave.xml")
*.**.nicMmWave**.phyMmWave.decider = xmldoc("config-mmwave.xml")
*.**.nicMmWave.phyMmWave.analogueModels = xmldoc("config-mmwave.xml")

[Config ieee80211adUrban]
extends = Sim-Options
description = "IEEE 802.11ad for Urban scenario"

*.manager.moduleType = "org.car2x.veinsmmwave.node.STAMmWave"
*.manager.updateInterval = 0.1s

*.rsu[*].applType = "org.car2x.veinsmmwave.application.simpleMmWaveApp.MmWaveRSUApp"
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.MmWaveAPMac"

*.node[*].applType = "org.car2x.veinsmmwave.application.simpleMmWaveApp.MmWaveNodeApp"
*.node[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.MmWaveSTAMac"

*.**.application.packetByteLength = 1024byte
*.**.application.beaconingFrequency = 1Hz

#*.node[*0].nicMmWave.macMmWave.requestSP = true #all the veh*0 (0, 10, 20, ...) request for SP, other request CBAP
*.**.nicMmWave.macMmWave.evaluateAlgorithms = true # don't do polling scheme, assign the whole DTI as SP for RSU to evaluate beam adaptation algorithms
*.**.nicMmWave.macMmWave.evaluatePacketByteLength = 1048576byte # it should be 1024, but 262144 (18 bit of SC frame) to speed up!
*.rsu[*].nicMmWave.macMmWave.doBeamFormingInSPAllocation = false
*.node[*].nicMmWave.macMmWave.addedConstructionSiteNearRSUUrban = true

# Visual debugs
#*.annotations.draw = false
#*.node[*].splitter.draw = false

#**.draw = false


#**.vehicleObstacles.cmdenv-log-level = off
#**.manager.cmdenv-log-level = off
#**.cmdenv-log-level = off

[Config SAMBAUrban]
extends = ieee80211adUrban
description = "SAMBA for urban scenario"
*.**.splitter.positionAidForMmWave = true
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.SambaAPMac"
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 100m
*.node[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.SambaSTAMac"
*.node[*].nicMmWave.macMmWave.rsuX = ${$x} # a smart car should know where the RSU(s) is
*.node[*].nicMmWave.macMmWave.rsuY = ${$y}
*.node[*].nicMmWave.macMmWave.rsuZ = ${$z} 
*.**.mac1609_4.useAcks = false 
*.rsu[0].nic.mac1609_4.address = ${rsuAddress="0"} # we cannot pick address for rsu, because it's always auto or zero, check BaseMacLayer.cc
*.node[*].splitter.rsuAddress = ${$rsuAddress}
*.**.mac1609_4.dot11ShortRetryLimit = 10000
*.**.mac1609_4.dot11LongRetryLimit = 10000

[Config FMLUrban]
extends = ieee80211adUrban
description = "Fast Machine Learning for urban scenario"

*.manager.moduleType = "org.car2x.veinsmmwave.node.STAMmWave"
*.manager.updateInterval = 0.1s

*.rsu[*].applType = "org.car2x.veinsmmwave.application.simpleMmWaveApp.MmWaveRSUApp" # Both BS and STA use the same app?
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.FmlAPMac"

*.node[*].applType = "org.car2x.veinsmmwave.application.simpleMmWaveApp.MmWaveRSUApp"
*.node[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.FmlSTAMac"
*.**.splitter.fml = true
*.node[*].splitter.rsuX = ${$x}
*.node[*].splitter.rsuY = ${$y}
*.node[*].splitter.rsuZ = ${$z}
*.node[*].nicMmWave.macMmWave.rsuX = ${$x} 
*.node[*].nicMmWave.macMmWave.rsuY = ${$y}
*.node[*].nicMmWave.macMmWave.rsuZ = ${$z}
*.node[*].splitter.rsuCoverRange = ${rsuCoverRange = 100m} # should be DSRC coverage
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = ${$rsuCoverRange} 
*.rsu[0].nic.mac1609_4.address = ${rsuAddress="0"} # we cannot pick address for rsu, because it's always auto or zero, check BaseMacLayer.cc
*.node[*].splitter.rsuAddress = ${$rsuAddress}
*.rsu[*].nicMmWave.macMmWave.enterBeamThreshold = -78dBm #SC-PHY fair
*.rsu[*].nicMmWave.macMmWave.exitBeamThreshold = -78dBm # SC-PHY fair
*.**.mac1609_4.useAcks = true 
*.rsu[*].nicMmWave.macMmWave.servingOldVehicleInNewBeaconInterval = true
*.**.mac1609_4.dot11ShortRetryLimit = 10000
*.**.mac1609_4.dot11LongRetryLimit = 10000
*.rsu[*].nicMmWave.macMmWave.considerObstaclesInVehiclesLeavingBeam = true #TODO whenVehcileLeavingTheBeamFMl consider the norm = true if this value = true
*.rsu[*].nicMmWave.macMmWave.totalNo = 10000 # 3089 with 120m in 24h, set to 10000 because of 40m mightbe?

[Config ieee80211adHighway]
extends = ieee80211adUrban
description = "IEEE 802.11ad experiment in highway scenario"
*.manager.launchConfig = xmldoc("highway.launchd.xml")
*.rsu[0].mobility.x = ${xh=2705}
*.rsu[0].mobility.y = ${yh=1335}
*.rsu[0].mobility.z = ${zh=15}
sim-time-limit = 24h


[Config SAMBAHighway]
extends = SAMBAUrban
description = "SAMBA in highway scenario"
*.manager.launchConfig = xmldoc("highway.launchd.xml")
*.rsu[0].mobility.x = ${xh=2705}
*.rsu[0].mobility.y = ${yh=1335}
*.rsu[0].mobility.z = ${zh=15}
*.node[*].nicMmWave.macMmWave.rsuX = ${$xh} # a smart car should know where the RSU(s) is
*.node[*].nicMmWave.macMmWave.rsuY = ${$yh}
*.node[*].nicMmWave.macMmWave.rsuZ = ${$zh}
sim-time-limit = 24h

[Config FMLHighway]
extends = FMLUrban
description = "FML in highway scenario"
*.manager.launchConfig = xmldoc("highway.launchd.xml")
*.rsu[0].mobility.x = ${xh=2705}
*.rsu[0].mobility.y = ${yh=1335}
*.rsu[0].mobility.z = ${zh=15}
*.node[*].nicMmWave.macMmWave.rsuX = ${$xh} # a smart car should know where the RSU(s) is
*.node[*].nicMmWave.macMmWave.rsuY = ${$yh}
*.node[*].nicMmWave.macMmWave.rsuZ = ${$zh}
*.node[*].splitter.rsuX = ${$xh}
*.node[*].splitter.rsuY = ${$yh}
*.node[*].splitter.rsuZ = ${$zh}
*.rsu[*].nicMmWave.macMmWave.totalNo = 30000 # 11392 with 120m in 24h, set to 30000 because of 40m?
sim-time-limit = 24h

[Config FMLUrban2]
extends = FMLUrban
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.FmlAPMac2"

[Config FMLHighway2]
extends = FMLHighway
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.FmlAPMac2"

[Config FMLUrban2False]
extends = FMLUrban2
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.FmlAPMac2"
*.rsu[*].nicMmWave.macMmWave.considerObstaclesInVehiclesLeavingBeam = false

[Config FMLHighway2False]
extends = FMLHighway2
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.FmlAPMac2"
*.rsu[*].nicMmWave.macMmWave.considerObstaclesInVehiclesLeavingBeam = false

[Config SAMBAUrban2]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.SambaAPMac2"

[Config SAMBAHighway2]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWaveType = "org.car2x.veinsmmwave.mac.SambaAPMac2"



[Config SAMBAUrban2BI100]
extends = SAMBAUrban2
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 100millisec

[Config SAMBAHighway2BI100]
extends = SAMBAHighway2
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 100millisec

[Config SAMBAUrban2BI60]
extends = SAMBAUrban2
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 60millisec

[Config SAMBAHighway2BI60]
extends = SAMBAHighway2
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 60millisec

[Config SAMBAUrban2BI30]
extends = SAMBAUrban2
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 30millisec

[Config SAMBAHighway2BI30]
extends = SAMBAHighway2
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 30millisec



[Config SAMBAUrban28h]
extends = SAMBAUrban2
sim-time-limit = 8h

[Config SAMBAHighway28h]
extends = SAMBAHighway2
sim-time-limit = 8h

[Config FMLUrban8h]
extends = FMLUrban
sim-time-limit = 8h

[Config FMLHighway8h]
extends = FMLHighway
sim-time-limit = 8h



[Config SAMBAUrban40m]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 40m

[Config SAMBAUrban60m]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 60m

[Config SAMBAUrban80m]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 80m
 
[Config SAMBAUrban100m]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 100m

[Config SAMBAUrban120m]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 120m

[Config SAMBAUrban140m]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 140m

[Config SAMBAHighway40m]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 40m

[Config SAMBAHighway60m]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 60m

[Config SAMBAHighway80m]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 80m
 
[Config SAMBAHighway100m]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 100m

[Config SAMBAHighway120m]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 120m

[Config SAMBAHighway140m]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 140m


[Config FMLUrban40m]
extends = FMLUrban
*.node[*].splitter.rsuCoverRange = 40m 
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 40m

[Config FMLUrban60m]
extends = FMLUrban
*.node[*].splitter.rsuCoverRange = 60m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 60m

[Config FMLUrban80m]
extends = FMLUrban
*.node[*].splitter.rsuCoverRange = 80m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 80m
 
[Config FMLUrban100m]
extends = FMLUrban
*.node[*].splitter.rsuCoverRange = 100m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 100m

[Config FMLUrban120m]
extends = FMLUrban
*.node[*].splitter.rsuCoverRange = 120m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 120m

[Config FMLUrban140m]
extends = FMLUrban
*.node[*].splitter.rsuCoverRange = 140m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 140m

[Config FMLHighway40m]
extends = FMLHighway
*.node[*].splitter.rsuCoverRange = 40m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 40m

[Config FMLHighway60m]
extends = FMLHighway
*.node[*].splitter.rsuCoverRange = 60m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 60m

[Config FMLHighway80m]
extends = FMLHighway
*.node[*].splitter.rsuCoverRange = 80m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 80m
 
[Config FMLHighway100m]
extends = FMLHighway
*.node[*].splitter.rsuCoverRange = 100m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 100m

[Config FMLHighway120m]
extends = FMLHighway
*.node[*].splitter.rsuCoverRange = 120m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 120m

[Config FMLHighway140m]
extends = FMLHighway
*.node[*].splitter.rsuCoverRange = 140m
*.rsu[*].nicMmWave.macMmWave.rsuCoverRange = 140m

[Config SAMBAUrbanBI30]
extends = SAMBAUrban
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 30millisec

[Config SAMBAUrbanBI40]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 40millisec

[Config SAMBAUrbanBI50]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 50millisec

[Config SAMBAUrbanBI60]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 60millisec

[Config SAMBAUrbanBI70]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 70millisec

[Config SAMBAUrbanBI80]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 80millisec

[Config SAMBAUrbanBI90]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 90millisec

[Config SAMBAUrbanBI100]
extends = SAMBAUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 100millisec



[Config SAMBAHighwayBI30]
extends = SAMBAHighway
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 30millisec

[Config SAMBAHighwayBI40]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 40millisec

[Config SAMBAHighwayBI50]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 50millisec

[Config SAMBAHighwayBI60]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 60millisec

[Config SAMBAHighwayBI70]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 70millisec

[Config SAMBAHighwayBI80]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 80millisec

[Config SAMBAHighwayBI90]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 90millisec

[Config SAMBAHighwayBI100]
extends = SAMBAHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 100millisec


[Config ieee80211adUrbanBI30]
extends = ieee80211adUrban
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 30millisec

[Config ieee80211adUrbanBI40]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 40millisec

[Config ieee80211adUrbanBI50]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 50millisec

[Config ieee80211adUrbanBI60]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 60millisec

[Config ieee80211adUrbanBI70]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 70millisec

[Config ieee80211adUrbanBI80]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 80millisec

[Config ieee80211adUrbanBI90]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 90millisec

[Config ieee80211adUrbanBI100]
extends = ieee80211adUrbanBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 100millisec


[Config ieee80211adHighwayBI30]
extends = ieee80211adHighway
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 30millisec

[Config ieee80211adHighwayBI40]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 40millisec

[Config ieee80211adHighwayBI50]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 50millisec

[Config ieee80211adHighwayBI60]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 60millisec

[Config ieee80211adHighwayBI70]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 70millisec

[Config ieee80211adHighwayBI80]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 80millisec

[Config ieee80211adHighwayBI90]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 90millisec

[Config ieee80211adHighwayBI100]
extends = ieee80211adHighwayBI30
*.rsu[*].nicMmWave.macMmWave.beaconIntervalDuration = 100millisec


[Config ieee80211adUrbanWithoutTLS]
extends = ieee80211adUrban
*.manager.launchConfig = xmldoc("darmstadt-no-tls.launchd.xml")

[Config SAMBAUrbanWithoutTLS]
extends = SAMBAUrban
*.manager.launchConfig = xmldoc("darmstadt-no-tls.launchd.xml")

[Config FMLUrbanWithoutTLS]
extends = FMLUrban
*.manager.launchConfig = xmldoc("darmstadt-no-tls.launchd.xml")